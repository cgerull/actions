name: Test workflow

on:
  push:

jobs:
  push:
    runs-on: ubuntu-latest
    env:
      # TODO: Change variable to your image's name.
      IMAGE_NAME: "cgerull/busybox"
      TAG: "latest"
    steps:
      - name: Set image name and version
        run: |
          echo "ref ${{ github.ref }}"
          # Strip git ref prefix from version
          VER=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          echo "ref ${{ github.ref }}"
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VER=$(echo $VER | sed -e 's/^v//')
          echo "second VER $VER"
          # Use Docker `latest` tag convention
          [[ $VER =~ [0-9].* ]] && echo "TAG=$VER" >> $GITHUB_ENV

          echo TAG $VER
          echo "TAG=$VER" >> $GITHUB_ENV

          IMAGE=${{ env.IMAGE_NAME }}
          echo IMAGE $IMAGE 
          IMAGE="$IMAGE:$VER"
          echo modified image $IMAGE

          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo GITHUB_ENV $GITHUB_ENV
            - name: Set image name and version
        run: |
          # Strip git ref prefix from version
          echo "ref ${{ github.ref }}"
          VER=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          echo "Get ref ${{ github.ref }}"
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VER=$(echo $VER | sed -e 's/^v//')
          echo "Strip leading v $VER"
          # Use Docker `latest` tag convention
          [[ $VER =~ [0-9].* ]] && echo "TAG=$VER" >> $GITHUB_ENV
          [[ $VER =~ [0-9].* ]] && echo "NEWTAG=$VER" >> $GITHUB_ENV
          echo VER $VER
          echo TAG ${{ env.TAG }}
          echo NEWTAG ${{ env.NEWTAG }}
          
          IMAGE="${{ env.IMAGE_NAME }}:${{ env.TAG }}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
      - name: Print image name env
        run: |
          echo "Image_NAME: ${{ env.IMAGE_NAME }}"
          echo "Tag: ${{ env.TAG }}"
          echo "IMAGE: ${{ env.IMAGE }}"